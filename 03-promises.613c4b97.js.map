{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAKMC,EAAOC,SAASC,cAAc,aA+BpC,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IArCPL,EAAKY,iBAAiB,UAAU,SAAAC,GAC9BA,EAAMC,iBAON,IALA,IAAMC,EAAaf,EAAKgB,SAASX,MAAMY,MACjCC,EAAYlB,EAAKgB,SAASG,KAAKF,MAC/BG,EAAcpB,EAAKgB,SAASK,OAAOJ,MACrCK,EAAeC,OAAOR,GAEjBS,EAAW,EAAGA,GAAYJ,EAAaI,IAC9CrB,EAAcqB,EAAUF,GACrBG,MAAK,SAAAC,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MACjBsB,QAAQC,IAAI,uBAAwCC,OAAfzB,EAAS,QAAYyB,OAANxB,EAAM,OAC1DP,EAAAgC,OAAOC,QAAQ,uBAAwCF,OAAfzB,EAAS,QAAYyB,OAANxB,EAAM,M,IAE9D2B,OAAM,SAAAN,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MAClBsB,QAAQC,IAAI,sBAAuCC,OAAfzB,EAAS,QAAYyB,OAANxB,EAAM,OACzDP,EAAAgC,OAAOG,QAAQ,sBAAqCJ,OAAfzB,EAAS,QAAYyB,OAANxB,EAAM,M,IAE9DiB,GAAgBC,OAAOL,E","sources":["src/js/03-promises.js"],"sourcesContent":["'use strict';\n// Import\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n//Dom\nconst form = document.querySelector('form.form');\n\n//Event Listener\nform.addEventListener('submit', event => {\n  event.preventDefault();\n\n  const delayValue = form.elements.delay.value;\n  const stepValue = form.elements.step.value;\n  const amountValue = form.elements.amount.value;\n  let currentDelay = Number(delayValue);\n\n  for (let position = 1; position <= amountValue; position++) {\n    createPromise(position, currentDelay)\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    currentDelay += Number(stepValue);\n  }\n});\n\n/**CreatePromise\n *\n * @param {Number} position\n * @param {Number} delay\n * @returns Promise\n */\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","event","preventDefault","delayValue","elements","value","stepValue","step","amountValue","amount","currentDelay","Number","position1","then","param","console","log","concat","Notify","success","catch","failure"],"version":3,"file":"03-promises.613c4b97.js.map"}